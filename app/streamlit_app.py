import pandas as pd
import streamlit as st
from datetime import datetime, timedelta


# Ã–rnek veri oluÅŸturucu / Sample data generator
def generate_sample_data_df():
    """Ã–rnek araÃ§ kayÄ±tlarÄ±nÄ± iÃ§eren bir pandas DataFrame dÃ¶ndÃ¼rÃ¼r."""
    """Returns a pandas DataFrame with sample vehicle records."""
    now = datetime.now()
    data = [
        {"plate": "34ABC01", "model": "Renault Clio", "entry_time": (now - timedelta(hours=1, minutes=23)),
         "exit_time": None},
        {"plate": "06XYZ99", "model": "Toyota Corolla", "entry_time": (now - timedelta(days=1, hours=2)),
         "exit_time": (now - timedelta(days=1, hours=1))},
        {"plate": "35QWE12", "model": "Fiat Egea", "entry_time": (now - timedelta(hours=6)), "exit_time": None},
        {"plate": "07RST45", "model": "Volkswagen Passat", "entry_time": (now - timedelta(days=3, hours=4)),
         "exit_time": (now - timedelta(days=2, hours=20))},
        {"plate": "16ABC02", "model": "Ford Focus", "entry_time": (now - timedelta(hours=10)), "exit_time": None},
        {"plate": "42XYZ03", "model": "Opel Astra", "entry_time": (now - timedelta(days=0, minutes=45)), "exit_time": None},
    ]
    df = pd.DataFrame(data)
    # Hesaplamalar iÃ§in zamanlarÄ±n datetime formatÄ±nda olduÄŸundan emin olun
    # Ensure times are in datetime format for calculations
    df['entry_time'] = pd.to_datetime(df['entry_time'])
    df['exit_time'] = pd.to_datetime(df['exit_time'])
    return df


# Ana Streamlit uygulama fonksiyonu / Main Streamlit app function
def run_streamlit_app():
    """EtkileÅŸimli Streamlit tabanlÄ± kullanÄ±cÄ± arayÃ¼zÃ¼nÃ¼ Ã§alÄ±ÅŸtÄ±rÄ±r."""
    """Runs the interactive Streamlit-based UI."""
    df = generate_sample_data_df()

    # Tarihleri biÃ§imlendirmek iÃ§in yardÄ±mcÄ± fonksiyon / Helper function for formatting dates
    def fmt(dt):
        return dt.strftime("%Y-%m-%d %H:%M:%S") if pd.notnull(dt) else "-"

    st.set_page_config(page_title="AraÃ§ Takip Paneli", layout="wide")
    st.title("AraÃ§ Takip Paneli")

    # SeÃ§ilen plaka iÃ§in oturum durumunu baÅŸlat (eÄŸer yoksa)
    # Initialize session state for selected plate (if not exists)
    if "selected_plate" not in st.session_state:
        st.session_state["selected_plate"] = None

    # Filtreler iÃ§in kenar Ã§ubuÄŸu / Sidebar for filters
    st.sidebar.header("Filtreler")
    mode = st.sidebar.radio("GÃ¶rÃ¼ntÃ¼leme modu:", ("Ä°Ã§erdeki AraÃ§lar", "TÃ¼m GeÃ§miÅŸ"))

    min_date = (datetime.now() - timedelta(days=30)).date()
    date_range = st.sidebar.date_input("GÃ¼n seÃ§ (veya aralÄ±k)", value=(min_date, datetime.now().date()))

    if isinstance(date_range, (tuple, list)):
        start_date, end_date = date_range[0], date_range[1]
    else:
        start_date = date_range
        end_date = date_range

    plate_search = st.sidebar.text_input("Plaka ara (opsiyonel)")

    # DataFrame'e filtreleri uygula / Apply filters to the DataFrame
    filtered = df.copy()
    if mode == "Ä°Ã§erdeki AraÃ§lar":
        filtered = filtered[filtered["exit_time"].isnull()]

    # Tarih aralÄ±ÄŸÄ± filtresini uygula
    # Apply the date range filter
    if start_date and end_date:
        filtered = filtered[
            (filtered["entry_time"].dt.date >= start_date) &
            (filtered["entry_time"].dt.date <= end_date)
        ]
    elif start_date:
        filtered = filtered[filtered["entry_time"].dt.date == start_date]

    if plate_search:
        filtered = filtered[filtered["plate"].str.contains(plate_search, case=False, na=False)]

    filtered = filtered.sort_values(by="entry_time", ascending=False).reset_index(drop=True)

    # Ana iÃ§erik dÃ¼zeni: Sol taraf liste, saÄŸ taraf detaylar iÃ§in / Main content layout: Left for list, right for details
    left_col, right_col = st.columns([2, 1])

    with left_col:
        st.markdown("### AraÃ§lar")

        if filtered.empty:
            st.info("SeÃ§ilen filtrelere gÃ¶re araÃ§ bulunamadÄ±.")
        else:
            for idx, row in filtered.iterrows():
                plate = row["plate"]
                model = row["model"]
                entry = row["entry_time"]
                exit_t = row["exit_time"]

                with st.container(border=True):
                    col1, col2 = st.columns([1, 3])
                    with col1:
                        st.markdown(f"""
                                                   <div style="text-align: center; font-size: 1.5em; font-weight: bold; letter-spacing: 1px;">
                                                       {plate}
                                                   </div>
                                               """, unsafe_allow_html=True)
                    with col2:
                        st.markdown(f"**{model}**")
                        st.write(f"GiriÅŸ: {fmt(entry)}")
                        if pd.notnull(exit_t):
                            st.write(f"Ã‡Ä±kÄ±ÅŸ: {fmt(exit_t)}")
                            total = exit_t - entry
                            st.write(f"Toplam kalÄ±ÅŸ: **{str(total).split('.')[0]}**")
                        else:
                            now = datetime.now()
                            duration = now - entry
                            st.write(f"Ä°Ã§erde geÃ§en sÃ¼re: **{str(duration).split('.')[0]}**")

                        btn_key = f"detay_{idx}_{plate}"
                        # KullanÄ±cÄ± butona bastÄ±ÄŸÄ±nda, oturum durumunu gÃ¼ncelle ve detaylarÄ± gÃ¶ster
                        # When the user clicks the button, update the session state and show details
                        if st.button("DetaylarÄ± GÃ¶ster", key=btn_key):
                            st.session_state["selected_plate"] = plate
                st.markdown("---")

    with right_col:
        st.markdown("### SeÃ§ilen AraÃ§ DetaylarÄ±")
        selected_plate = st.session_state.get("selected_plate", None)
        if selected_plate is None:
            st.write("Listeden bir araÃ§ seÃ§mek iÃ§in 'DetaylarÄ± GÃ¶ster' butonuna basÄ±n. ğŸ‘ˆ")
        else:
            selected_row_data = df[df["plate"] == selected_plate].iloc[0]
            st.markdown(f"#### {selected_row_data['plate']} â€” {selected_row_data['model']}")
            st.write(f"**GiriÅŸ:** {fmt(selected_row_data['entry_time'])}")
            st.write(f"**Ã‡Ä±kÄ±ÅŸ:** {fmt(selected_row_data['exit_time'])}")

            if pd.notnull(selected_row_data['exit_time']):
                total = selected_row_data['exit_time'] - selected_row_data['entry_time']
                st.write(f"**Toplam kalÄ±ÅŸ:** {str(total).split('.')[0]}")
            else:
                now = datetime.now()
                elapsed = now - selected_row_data['entry_time']
                st.write(f"**Ä°Ã§erde geÃ§en sÃ¼re:** {str(elapsed).split('.')[0]}")

            st.markdown("---")
            st.markdown("<h5 style='color: #333;'>GeÃ§miÅŸ KayÄ±tlar (Ã¶rnek)</h5>", unsafe_allow_html=True)
            hist = pd.DataFrame([
                {"action": "GiriÅŸ", "time": selected_row_data['entry_time'] - timedelta(days=10)},
                {"action": "Ã‡Ä±kÄ±ÅŸ", "time": selected_row_data['entry_time'] - timedelta(days=10) + timedelta(hours=2)},
                {"action": "GiriÅŸ", "time": selected_row_data['entry_time']},
            ])
            st.dataframe(hist.assign(time=lambda d: d['time'].dt.strftime('%Y-%m-%d %H:%M:%S')), hide_index=True)

    # CSV indirme butonu
    st.sidebar.markdown("---")
    csv = df.to_csv(index=False).encode('utf-8')
    st.sidebar.download_button("Veriyi CSV olarak indir", data=csv, file_name="parking_data.csv", mime="text/csv")
    st.caption("Not: Bu demo, kameradan plaka okuma entegrasyonu iÃ§ermez. Verinizi gerÃ§ek bir kaynaktan alabilirsiniz.")


# UygulamayÄ± Ã§alÄ±ÅŸtÄ±r / Run the app
if __name__ == '__main__':
    run_streamlit_app()
